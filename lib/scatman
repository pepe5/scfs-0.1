#!/usr/bin/python
#
###########################################################################
#  Copyright (C) 2006 by Dorin Scutara\u015fu <dorin.scutarasu@gmail.com> #
#                                                                         #
#  This program is free software; you can redistribute it and/or modify   #
#  it under the terms of the GNU General Public License. See the file     #
#  COPYING for details.                                                   #
###########################################################################

import sys,os

from pysqlite2 import dbapi2 as sqlite

# sys.path = [os.path.dirname(sys.argv[0])] + sys.path
# print ' -path: %s' % sys.path
from Scfs.CatalogCreator import CatalogCreator

usage = '''
Usage: %s add <CDMountPoint> <CDLabel> <dbfile>
       %s del <CDLabel> <dbfile>
       %s help
''' % (sys.argv[0],sys.argv[0],sys.argv[0])


def removeLabel(dbFile,CDLabel):
    try:
        if not os.path.exists(dbFile):
            raise ValueError('Database not found.')
        con = sqlite.connect(dbFile)
        cur = con.cursor()
        cur.execute("select fid,label from CDs where label = '%s'" %CDLabel)
        rows = cur.fetchall()
        if len(rows) == 0 :
            raise ValueError("Label doesn't exist.")
        cur.execute('delete from CDs where label = "%s"' %CDLabel)
        cur.execute('drop table if exists %s_files' %CDLabel)
        cur.execute('drop index if exists %s_pid_idx' %CDLabel)
        cur.execute('drop index if exists %s_pid_fname_idx' %CDLabel)
        con.commit()
    except sqlite.OperationalError:
        raise ValueError('Deletion failed. Probably invalid database.')
    
def labels(dbFile):
    try:
        con = sqlite.connect(dbFile)
        con.row_factory = sqlite.Row
        cur = con.cursor()
        cur.execute("select label from CDs")
        rows = cur.fetchall()
        
        for row in rows:
            yield row['label']
    except sqlite.OperationalError:
        raise ValueError('Deletion failed. Probably invalid database.')

if __name__ == '__main__':
    try:
        if sys.argv[1] in ['-h','--help','help']:
            print usage
            sys.exit(0)
        elif sys.argv[1] in ['add','a']:
            action = 'add'
            mountPoint = sys.argv[2]
            CDLabel = sys.argv[3]
            dbFile = sys.argv[4]
        elif sys.argv[1] in ['del','rm','remove','d','r']:
            action = 'del'
            CDLabel = sys.argv[2]
            dbFile = sys.argv[3]
        elif sys.argv[1] in ['list','l']:
            action = 'list'
            dbFile = sys.argv[2]
        else:
            print >> sys.stderr, """
Bad syntax.
%s
""" % (usage)
            sys.exit(1)
    except IndexError:
        print >> sys.stderr, """
Not enouth arguments.
%s
""" % (usage)
    else:
        try:
            if action == 'add':
                catCreator = CatalogCreator(dbFile, mountPoint, CDLabel)
                catCreator.run()
            elif action == 'del':
                removeLabel(dbFile,CDLabel)
            elif action == 'list':
                if not os.path.exists(dbFile):
                    raise ValueError('Database not found.')
                print ('These are the labels of the CDs added to database '
                     '%s:\n' % dbFile)
                count = 0
                for label in labels(dbFile):
                    print label
                    count = count + 1
                print '\n%d CD labels found.' % count
        except (OSError,ValueError),details:
            print >> sys.stderr,"Error:", details

