#!/bin/bash
#>! move perl -pe 's/([\d-]+\s+[\d:]+)\.\d+/$1/') from sclocate-import to here
function find_act \
    { find "$1" -xdev -type f -printf "%i %k %M %n %u %g %s %TY-%Tm-%Td %TH:%TM:%TS %h/%f\n"
    true; }


#>! add functionality where find_cats will return last CAT foreach-> A@B*.sqlite set
function find_cats \
    { fn find_cats 1>&2
    N=-1; if [[ -n $1 ]]; then N=$1; fi
    mount | perl -ne 'm{^/.* on (.*) type } and print "$1\n"' | while read FS;
    do
        cd $FS
	ls -1dht *@*[0-9].sqlite | perl -ne '/(.*@.*),\d+-\d+-\d+.sqlite/ and print "$1\n"' \
	    | sort -u | tee >(awk '{print " -"$0":"}' 1>&2) \
	    | while read CC
	do
	    ls -1dht `pwd`/*@*[0-9].sqlite | head $N
	done
    done; }


# list files with equal sizes
# IN/s: < [[find_cats]]
function list_sdups \
    { while read CAT;
    do
    #(<) BEGIN TRANSACTION + | tail -n+2
    sqlite3 "$CAT" <<-EOF | awk -v CAT=$CAT '{print $0,CAT}';
		SELECT ix FROM find_printf f
		CROSS JOIN (SELECT s, Count(s) as scnt FROM find_printf WHERE s <> 0 GROUP BY s) sc ON sc.s = f.s
		CROSS JOIN (SELECT fn, Count(fn) as ncnt FROM find_printf GROUP BY fn) nc ON nc.fn = f.fn
		ORDER BY scnt DESC, f.fn;
		EOF
        # LIMIT 100
    done; }


# EX/s:> find_cats | tun_cat
function tun_cat \
    { while read CAT;
    do
        case $1 in
            (--ix1 | *) echo 1>&2 '' -tun_cat: 'indexing $CAT: i,s,mt,dir, & fn..'
                sqlite3 "$CAT" <<-EOF
			CREATE INDEX "find_printf_inode" ON find_printf (inode ASC);
			CREATE INDEX "find_printf_s" ON find_printf (s ASC);
			CREATE INDEX "find_printf_mtime" ON find_printf (mtime ASC);
			CREATE INDEX "find_printf_dir" ON find_printf (dir ASC);
			CREATE INDEX "find_printf_fn" ON find_printf (fn ASC);
			CREATE INDEX "find_printf_md5" ON find_printf (md5 ASC);
			EOF
                ls -ldht "$CAT" # `pwd`/*@*.sqlite* `pwd`/$F.sqlite | sort -t@ -k2r -u
                ;;
        esac
        done; }


#>! move this to scatfs iface. (There should be fn-set of ls, cp, mv, locate, & such..)
# EX/s:> sclocate eng.%
function sclocate \
    { fn sclocate 1>&2
    find_cats | while read CAT;
    do
        ls -ldh `dirname $CAT`/*@*.sqlite
        sqlite3 "$CAT" "SELECT * FROM find_printf WHERE fn LIKE '$1' LIMIT 10"
        echo;
    done; }


#>! rewrite whole lib to python
# paginate IN-2 to file to free up origin IN-1
# EX/s:> pgpipe "seq 8" "cat -n"
# EX/s:> pgpipe "find_cats | list_sdups | sed -ne '/11435/,\$p'" last_rec
function pgpipe \
    { STEP=1000; UP=9888777
    seq 0 $STEP $UP | while read i
    do
        eval $1 | sed -ne "`expr $i + 1`,`expr $i + $STEP`p" | pv > /tmp/.pgpipe
        echo -e 1>&2 "\n -`expr $i + 1`..`expr $i + $STEP`:" `ls -ldh /tmp/.pgpipe`
        if ! [[ -s /tmp/.pgpipe ]]
        then
            echo 1>&2 pgpipe: piping file is 0-sized. Exiting..
            break
        fi
        cat /tmp/.pgpipe | pv | eval $2
    done
    true; }


# find last file/'s rec. candidates: - and list them, || update them..
# IN/s: < [[list_sdups]]
# EX/s:> find_cats | list_sdups | last_rec
function last_rec \
    { while read IX CAT;
    do
        if [[ -z $IX ]]; then continue; fi
        LASTC=$(sqlite3 "$CAT" "
            SELECT inode,du,'-',lns,'-','-',s,mtime,dir,fn
            FROM find_printf f
            WHERE ut IS NULL
            AND dir = (SELECT dir FROM find_printf WHERE ix=$IX)
            AND fn = (SELECT fn FROM find_printf WHERE ix=$IX)
            ORDER BY dt DESC
            LIMIT 1"\
          | perl -nle '
            @A=split /\|/;
            print join (" ",@A[0..$#A-1])."$A[$#A]"')
        S=`echo $LASTC | cut -d\  -f7`
        P=`echo $LASTC | cut -d\  -f10-`
        F=${P##*/}
        if [[ 0 != `echo $LASTC | wc -w` ]]
        then
            LASTF=$(find 2>&1 "`dirname $CAT`/$P" \
                -type f \
                -printf "%i %k - %n - - %s %TY-%Tm-%Td %TH:%TM:%TS %h/%f\n" \
                | perl -pe 's/([\d-]+\s+[\d:]+)\.\d+/$1/')
            if [[ "`echo $LASTC | cut -d\  -f-9`" != "`echo $LASTF | cut -d\  -f-9`" ]];
            then
                echo 1>&2
                echo 1>&2 $IX $CAT: '<>' # -S: $S -F:$F
                echo 1>&2 ' <-'$LASTC
                echo 1>&2 ' ->'$LASTF
                case $1 in
                    (-l) true;; # echo 1>&2 '' -l/isting only..
                    (+add | *)
                        echo 1>&2 '' +add/ing: utime-label to $CAT: `dirname $CAT`/$P
                        UT=`date +%Y-%m-%d\ %T`
                        #>? sleep 1
                        sqlite3 "$CAT" <<-EOF
				BEGIN TRANSACTION;
				UPDATE find_printf 
				SET ut = '$UT'
				WHERE ut IS NULL
				AND ix = $IX;
				COMMIT;
				EOF
                        if [[ $LASTF =~ find: ]]
                        then true
                        else 
                            LASTR=$(find_act "`dirname $CAT`/$P" | head -1)
                            echo 1>&2 '' +add/ing: rec to $CAT: $LASTR
                            echo $LASTR | sclocate-import | head #>! sqlite3 "$CAT"
                            ls -ldht 1>&2 "$CAT" # `pwd`/*@*.sqlite* `pwd`/$F.sqlite | sort -t@ -k2r -u
                            echo $(sqlite3 "$CAT" "
                                SELECT ix
                                FROM find_printf f
                                WHERE ut IS NULL
                                AND dir = (SELECT dir FROM find_printf WHERE ix=$IX)
                                AND fn = (SELECT fn FROM find_printf WHERE ix=$IX)
                                ORDER BY dt DESC
                                LIMIT 1") $CAT
                        fi;;
                esac
            else
                echo 1>&2 -n .
                echo $IX $CAT
            fi
        fi
        done; }


function tun_md5 \
    { while read IX CAT
    do
    if [[ -z $IX ]]; then continue; fi
    case $1 in
        (-f | --force | *)
            echo ...;;
    esac
    done; }


##
# original version:
# !/usr/bin/python
# Usage: %s add <CDMountPoint> <CDLabel> <dbfile>
#        %s del <CDLabel> <dbfile>
#        %s help
# ''' % (sys.argv[0],sys.argv[0],sys.argv[0])
